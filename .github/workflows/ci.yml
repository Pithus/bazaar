name: CI

# Enable Buildkit and let compose use it to speed up image building
env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

on:
  pull_request:
    branches: [ "master" ]
    paths-ignore: [ "docs/**" ]

  push:
    branches: [ "master" ]
    paths-ignore: [ "docs/**" ]


jobs:
  flake8:
    runs-on: ubuntu-latest
    steps:

      - name: Checkout Code Repository
        uses: actions/checkout@v3.2.0

      - name: Set up Python 3.8
        uses: actions/setup-python@v4.1.0
        with:
          python-version: 3.8

      - name: Install flake8
        run: |
          python -m pip install --upgrade pip
          pip install flake8

      - name: Lint with flake8
        run: flake8

#  build:
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v3.2.0
#      - name: Build the Pithus-core Docker image
#        run: docker build . --file compose/production/django/Dockerfile
#      - name: Build the Pithus-db Docker image
#        run: docker build . --file compose/production/postgres/Dockerfile
#      - name: Build the Pithus-web Docker image
#        run: docker build . --file compose/production/traefik/Dockerfile

  push-core:
#    needs: build
    env:
      IMAGE_NAME: pithus-core
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v3.2.0

      - name: Build image
        run: docker build . --file compose/production/django/Dockerfile --tag $IMAGE_NAME

      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: Push image
        run: |
          IMAGE_ID=docker.pkg.github.com/${{ github.repository }}/$IMAGE_NAME
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION

  push-db:
#    needs: build
    env:
      IMAGE_NAME: pithus-db
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v3.2.0

      - name: Build image
        run: docker build . --file compose/production/postgres/Dockerfile --tag $IMAGE_NAME

      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: Push image
        run: |
          IMAGE_ID=docker.pkg.github.com/${{ github.repository }}/$IMAGE_NAME
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION

  push-web:
#    needs: build
    env:
      IMAGE_NAME: pithus-web
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v3.2.0

      - name: Build image
        run: docker build . --file compose/production/traefik/Dockerfile --tag $IMAGE_NAME

      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: Push image
        run: |
          IMAGE_ID=docker.pkg.github.com/${{ github.repository }}/$IMAGE_NAME
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION


# With no caching at all the entire ci process takes 4m 30s to complete!
#  pytest:
#    runs-on: ubuntu-latest
#    steps:
#
#      - name: Checkout Code Repository
#        uses: actions/checkout@v3.2.0
#      - name: Build the Stack
#        run:  docker-compose -f local.yml build
#
#      - name: Make DB Migrations
#        run:  docker-compose -f local.yml run --rm django python manage.py migrate
#
#      - name: Run the Stack
#        run:  docker-compose -f local.yml up -d
#
#      - name: Run Django Tests
#        run:  docker-compose -f local.yml exec -T django pytest
#
#      - name: Tear down the Stack
#        run:  docker-compose down
